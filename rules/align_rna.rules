#; -*-makefile-*-

"""
Looks for fastqs or symlinks to fastqs in project/RNA/fastq/.
Requires installation of tophat2.
Rrequires insatallation of samtools.

Requires at least the following in its config:

assays:
  [assayname]:
    [samplename]:
      bam: /path/to/samplename.sort.bam
      fastq1: /path/to/samplename_matepair1.fastq.gz
      fastq2: null
      genome: [genome]
      rxbam: null
      bgbam: null
      bgfastq1: null
      bgfastq2: null
      bgrxbam: null

options:
  tophat2:
    [species]: [your options here]

"""


__author__ = "Matt Lawlor (matt.a.lawlor@gmail.com)"
__version__ = 1.0


from pathlib import Path


rule call_tophat2:
	input:
		"RNA/fastq/{genome}/{sample}_RNA_R1.fastq.gz"
	output:
		"RNA/tophat2/{genome}/{sample}/accepted_hits.bam", dir="RNA/tophat2/{genome}/{sample}/"
	params:
		pair = lambda wildcards: config["assays"]["RNA"][wildcards.sample].get("fastq2",""),
		genome = lambda wildcards: config["assays"]["RNA"][wildcards.sample]["genome"],
		custom = lambda wildcards: config["options"]["tophat2"][config["assays"]["RNA"][wildcards.sample]["genome"]]
	run:
		cmd = "tophat2 -o {outdir} {options} {fq} {fqpair}".format(outdir=output.dir,options=params.custom,fq=input,fqpair=params.pair)
		shell(cmd)

rule index_tophat2_bam:
	input:
		"RNA/tophat2/{genome}/{sample}/accepted_hits.bam"
	output:
		"RNA/tophat2/{genome}/{sample}/accepted_hits.bam.bai"

	message:
		"Indexing your bam now."
	shell:
		"samtools index {input} {output}"

rule organize_tophat2_output:
	input:
		lambda wildcards: expand("RNA/tophat2/{g}/{s}/accepted_hits.bam",g=wildcards.genome,s=wildcards.sample),
		lambda wildcards: expand("RNA/tophat2/{g}/{s}/accepted_hits.bam.bai",g=wildcards.genome,s=wildcards.sample)
	output:
		"RNA/bam/{genome}/{sample}.tophat2.sort.bam",
		"RNA/bam/{genome}/{sample}.tophat2.sort.bam.bai"
	message:
		"Creating symlink in RNA/bam/[genome] folder. Reminder: tophat2 autosorts its bams."
	run:
		rp = str(Path(input[0]).resolve())
		rpidx = str(Path(input[1]).resolve())
		shell("ln -s {file} {link}".format(file=rp,link=output[0]))
		shell("ln -s {file} {link}".format(file=rpidx,link=output[1]))
